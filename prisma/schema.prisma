// schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  loginLogs     LoginLog[]
  papers        Paper[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LoginLog {
  id        String   @id @default(cuid())
  userId    String
  loginType String   // "password", "google", "github", etc.
  ip        String?
  userAgent String?  @db.Text
  createdAt DateTime @default(now())
  success   Boolean

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Paper {
  id              String    @id @default(cuid())
  title           String
  authors         String
  abstract        String    @db.Text
  keywords        String
  fileUrl         String
  fileName        String
  fileStoragePath String    // pasta/caminho no Firebase
  fileSize        Int
  status          String    @default("pending")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  history         PaperHistory[]

  @@index([userId])
}

model PaperHistory {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  status     String
  comment    String   @db.Text
  reviewerId String?  // ID do revisor, se aplic√°vel

  paperId    String
  paper      Paper    @relation(fields: [paperId], references: [id], onDelete: Cascade)

  @@index([paperId])
}